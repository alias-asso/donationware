# Kickstart file for automated Fedora installation

# --- Console and Environment ---
# Use graphical mode installation
graphical

# Configure keyboard: set both console and graphical layout to French
keyboard --vckeymap=fr --xlayouts='fr'

# Set installer and system language
lang fr_FR

# Set the system timezone (assuming the hardware clock is in UTC)
timezone Europe/Paris --utc

# Use GNOME as the default desktop environment
xconfig --defaultdesktop=GNOME --startxonboot

# Configure network via DHCP and set the hostname.
network --bootproto=dhcp --device=link

# Set the root password (account is locked, so cannot be used to login).
rootpw --lock --plaintext galiasisthebest

# --- Disk Partitioning ---
# Erase all partitions on all recognized disks
clearpart --all
zerombr

# Automatically partition the disk using LVM.
autopart --type=lvm

# Install the bootloader onto the primary disk
bootloader --location=mbr --boot-drive=sda

# --- After the install ---
# Allow the user to setup his computer when booting for the first time.
firstboot --enable --reconfig

# Shut down the system after installation completes.
shutdown

# --- Install the same OS than the LiveCD image --
liveimg --url "http://192.168.1.1/fedora/42/x86_64/images/squashfs.img"

# --- Scripts ---
%pre
url="http://192.168.1.1:5000/computer/$mac_address"
body="{\"step\": 1}"
curl -X PATCH -H "Content-Type: application/json" -d "$body" "$url"

# Erase the disk
dd if=/dev/zero of=/dev/sda bs=64M

%end

# Get the computer information and send it to the server.
%pre-install

# Get computer info
mac_address=$(ip a s | grep ether | xargs | cut -d ' ' -f2)

computer_model=$(echo $(cat /sys/devices/virtual/dmi/id/board_vendor) $(cat /sys/devices/virtual/dmi/id/board_name))
processor_name=$(grep 'model name' /proc/cpuinfo | uniq | awk -F ': ' '{print $2}')
gpu_model=$(lspci | grep -i 'vga\|3d\|2d' | awk -F ':' '{print $3}')

ram_amount=$(free -h | awk '/^Mem:/ {print $2}')
ram_slots=$(dmidecode -t memory | grep 'Number Of Devices' | awk '{print $4}')
free_ram_slots=$(dmidecode -t memory | grep 'No Module Installed' | wc -l)

disk_size=$(lsblk /dev/sda | grep disk | awk '{print $4}')

# Send the data to the server
url="http://192.168.1.1:5000/computer/$mac_address"
body="{\"model\": \"$computer_model\", \"processor\": \"$processor_name\", \"ram\": \"$ram_amount\", \"ram_slots\": \"$ram_slots\", \"free_ram_slots\": \"$free_ram_slots\", \"disk_size\": \"$disk_size\", \"gpu\": \"$gpu_model\", \"step\": 2}"
curl -X PATCH -H "Content-Type: application/json" -d "$body" "$url"

%end

# Notify the server that the installation is complete
%post

mac_address=$(ip a s | grep ether | xargs | cut -d ' ' -f2)

url="http://192.168.1.1:5000/computer/$mac_address"
body="{\"step\": 3}"
curl -X PATCH -H "Content-Type: application/json" -d "$body" "$url"

%end

# Notify the server that the installation failed
%onerror

mac_address=$(ip a s | grep ether | xargs | cut -d ' ' -f2)

url="http://192.168.1.1:5000/computer/$mac_address"
body="{\"step\": 4}"
curl -X PATCH -H "Content-Type: application/json" -d "$body" "$url"

%end